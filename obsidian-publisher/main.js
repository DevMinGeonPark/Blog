/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => ObsidianPublisher
});
var import_obsidian = __toModule(require("obsidian"));
var fs = __toModule(require("fs/promises"));
var path = __toModule(require("path"));
var DEFAULT_SETTINGS = {
  blogSourcePath: "/Users/min/Desktop/website/src/content/posts"
};
var ObsidianPublisher = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("upload-cloud", "Publish/Unpublish Note", (evt) => {
      this.togglePublishStatus();
    });
    this.addCommand({
      id: "toggle-publish",
      name: "Toggle publish status",
      editorCallback: (editor, view) => {
        const file = view.file;
        if (file) {
          this.togglePublishStatus(file);
        }
      }
    });
    this.addCommand({
      id: "publish-current-file",
      name: "Publish current file",
      editorCallback: (editor, view) => {
        const file = view.file;
        if (file) {
          this.setPublishStatus(file, true);
        }
      }
    });
    this.addSettingTab(new PublisherSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async togglePublishStatus(file) {
    const targetFile = file || this.app.workspace.getActiveFile();
    if (!targetFile) {
      new import_obsidian.Notice("No active file to publish.");
      return;
    }
    await this.app.fileManager.processFrontMatter(targetFile, (frontmatter) => {
      const isPublished = frontmatter.published;
      frontmatter.published = !isPublished;
      new import_obsidian.Notice(`File marked as ${!isPublished ? "published" : "unpublished"}.`);
      this.copyPublishedFile(targetFile, !isPublished);
    });
  }
  async setPublishStatus(file, publish) {
    await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      if (frontmatter.published !== publish) {
        frontmatter.published = publish;
        new import_obsidian.Notice(`File marked as ${publish ? "published" : "unpublished"}.`);
        this.copyPublishedFile(file, publish);
      }
    });
  }
  async copyPublishedFile(file, isPublished) {
    const vaultPath = this.app.vault.adapter.getBasePath();
    const blogSourcePath = this.settings.blogSourcePath;
    const sourcePath = path.join(vaultPath, file.path);
    const destPath = path.join(blogSourcePath, file.path);
    try {
      if (isPublished) {
        await fs.mkdir(path.dirname(destPath), { recursive: true });
        await fs.copyFile(sourcePath, destPath);
        new import_obsidian.Notice(`Copied "${file.basename}" to blog source.`);
      } else {
        if (await fs.stat(destPath)) {
          await fs.rm(destPath);
          new import_obsidian.Notice(`Removed "${file.basename}" from blog source.`);
        }
      }
    } catch (error) {
      console.error("Error processing file:", error);
      new import_obsidian.Notice("Error processing file. See console for details.");
    }
  }
};
var PublisherSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Blog source path").setDesc("The path where published markdown files will be copied.").addText((text) => text.setPlaceholder("Example: blog_src").setValue(this.plugin.settings.blogSourcePath).onChange(async (value) => {
      this.plugin.settings.blogSourcePath = value;
      await this.plugin.saveSettings();
    }));
  }
};
